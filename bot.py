# SPDX-License-Identifier: BSD-3-Clause

import random
from typing import Optional, Tuple

import numpy as np

from cholerama import Positions, helpers

AUTHOR = "Mads"  # This is your team name
SEED = None  # Set this to a value to make runs reproducible

import numpy as np


def string_to_numpy_array(data_string):
    # Split the input string into lines
    lines = data_string.strip().split('\n')

    # Create an empty list to hold the rows of the array
    array_rows = []

    # Iterate over each line and convert it to a list of 0s and 1s
    for line in lines:
        row = [1 if char == 'O' else 0 for char in line]
        array_rows.append(row)

    # Convert the list of rows into a numpy array
    numpy_array = np.array(array_rows)

    return numpy_array


# Example usage:
max_start = """.........................
.........................
.........................
.........................
...........OO............
...........OO............
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
.........................
"""

max_go = """...................OOO...
.............O.....O..O..
.............O.....O.....
...........O..O....O.....
.............OO....O.....
...O............O..O.....
O.........O.........O....
.OO.....O...O..........O.
....O...O...O.........O..
OO.O.OO.O...O...OO....O..
....O.....O...OO....O...O
..O.OO..O...O...O..OO.O..
O...O....OO...O.....O....
..O....OO...O...O.OO.O.OO
..O.........O...O...O....
.O..........O...O.....OO.
....O.........O.........O
.....O..O...OO.......O...
.....O....OOOO...........
.....O....O..O...........
.....O.....O.............
..O..O.....O.............
...OOO...................
"""


small_infinite = """......O.
....O.OO
....O.O.
....O...
..O.....
O.O.....
"""

glider_gun = """..........OO......................
..........OO......................
..................................
..................................
....OO............................
..O.OO...OOO......................
.O.......OOO......................
....O.....OO......................
OO.O.......................OO.....
OO.......O.................O.O....
........O.O.......OO....OO.O.O....
.........O.......OOO....O.O.O.....
..................O.......O.......
...............OO.........OO......
...............OO.O.......OOO.....
...............O..O.......OOO.....
...............O...O......OOO.O...
................O..O......OO.O.O..
.................OO.......OO..O.O.
............................O...O.
..............OO.........O.OOOO.OO
...............O.........O.......O
............OOO...........OOO.OOO.
............O...............O.O..."""

glider_gun_start = """..................................
..................................
..................................
..................................
....OO............................
....OO............................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
.................................."""

glider_gun_go = """..........OO......................
..........OO......................
..................................
..................................
..................................
..O......OOO......................
.O.......OOO......................
....O.....OO......................
OO.O.......................OO.....
OO.......O.................O.O....
........O.O.......OO....OO.O.O....
.........O.......OOO....O.O.O.....
..................O.......O.......
...............OO.........OO......
...............OO.O.......OOO.....
...............O..O.......OOO.....
...............O...O......OOO.O...
................O..O......OO.O.O..
.................OO.......OO..O.O.
............................O...O.
..............OO.........O.OOOO.OO
...............O.........O.......O
............OOO...........OOO.OOO.
............O...............O.O..."""

eight_barrel = """....................OO....................
....................OO....................
......OO..................................
.....OO...................................
.......O..................................
...O......................................
..OO..................OO..................
..O.O.................O...................
......................O...................
.......................O..................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
................................O..O......
.................................OOO......
OO......................................OO
OO......................................OO
......OOO.................................
......O..O................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..................O.......................
...................O......................
...................O.................O.O..
..................OO..................OO..
......................................O...
..................................O.......
...................................OO.....
..................................OO......
....................OO....................
....................OO...................."""

safe_eight_barrel = """OO..................OO..................OO
OO..................OO..................OO
......OO..................................
.....OO...................................
.......O..................................
...O......................................
..OO..................OO..................
..O.O.................O...................
......................O...................
.......................O..................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
................................O..O......
.................................OOO......
OO......................................OO
OO......................................OO
......OOO.................................
......O..O................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..........................................
..................O.......................
...................O......................
...................O.................O.O..
..................OO..................OO..
......................................O...
..................................O.......
...................................OO.....
..................................OO......
OO..................OO..................OO
OO..................OO..................OO"""


die_hard = """
......O.
OO......
.O...OOO"""

acorn = """
.O.....
...O...
OO..OOO"""


def make_eight_barrel(x_offset, y_offset):
    xy_array = string_to_numpy_array(eight_barrel)
    y_max, x_max = np.where(xy_array > 0)

    x_max -= len(x_max)//2
    y_max -= len(y_max)//2

    return Positions(
        x=x_max + x_offset, y=y_max + y_offset
    )

def make_safe_eight_barrel(x_offset, y_offset):
    xy_array = string_to_numpy_array(safe_eight_barrel)
    y_max, x_max = np.where(xy_array > 0)

    x_max -= len(x_max)//2
    y_max -= len(y_max)//2

    return Positions(
        x=x_max + x_offset, y=y_max + y_offset
    )

class Bot:
    """
    This is the bot that will be instantiated for the competition.

    The pattern can be either a numpy array or a path to an image (white means 0,
    black means 1).
    """

    def __init__(
            self,
            number: int,
            name: str,
            patch_location: Tuple[int, int],
            patch_size: Tuple[int, int],
    ):
        """
        Parameters:
        ----------
        number: int
            The player number. Numbers on the board equal to this value mark your cells.
        name: str
            The player's name
        patch_location: tuple
            The i, j row and column indices of the patch in the grid
        patch_size: tuple
            The size of the patch
        """
        self.number = number  # Mandatory: this is your number on the board
        self.name = name  # Mandatory: player name
        self.color = None  # Optional
        self.patch_location = patch_location
        self.patch_size = patch_size

        self.rng = np.random.default_rng(SEED)

        if random.random() < 0.5:
            self.strategy = 1
        else:
            self.strategy = 5

        #self.strategy = 1

        # If we make the pattern too sparse, it just dies quickly
        #xy = self.rng.integers(0, 12, size=(2, 100))

        if self.strategy == 1:

            self.start_offset_x = 60
            self.start_offset_y = 75

            xy_array = string_to_numpy_array(max_start)
            y_max, x_max = np.where(xy_array > 0)

            self.done = 0

            self.pattern = Positions(
                x=x_max + self.start_offset_x, y=y_max + self.start_offset_y
            )

        elif self.strategy == 2:
            xy_array = string_to_numpy_array(small_infinite)
            y_max, x_max = np.where(xy_array > 0)

            self.pattern = Positions(
                x=x_max + patch_size[1] // 2, y=y_max + patch_size[0] // 2
            )

        elif self.strategy == 3:
            xy_array = string_to_numpy_array(glider_gun)
            y_max, x_max = np.where(xy_array > 0)

            self.pattern = Positions(
                x=x_max + patch_size[1] // 2, y=y_max + patch_size[0] // 2
            )

        elif self.strategy == 4:
            xy_array = string_to_numpy_array(glider_gun_start)
            y_max, x_max = np.where(xy_array > 0)

            self.pattern = Positions(
                x=x_max + patch_size[1] // 2, y=y_max + patch_size[0] // 2
            )
        elif self.strategy == 5:

            self.wait = None
            #self.wait_times = [30, 0, 0, 0]
            self.wait_times = [5, 5, 5] # only build 3 extra
            self.birth_times = [0]
            self.tried_to_build = None

            self.safe = False

            #self.coordinates = [[self.patch_size[1] // 3, 2 * self.patch_size[0] // 3],
            #                    [self.patch_size[1] // 3, self.patch_size[0] // 3],
            #                    [2*self.patch_size[1] // 3, 2 * self.patch_size[0] // 3],
            #                    [2*self.patch_size[1] // 3, self.patch_size[0] // 3],
            #                    [25, 25]]

            off_size = 34
            self.coordinates = [[self.patch_size[1] // 2 - off_size, self.patch_size[0] // 2 + 2*off_size],
                                [self.patch_size[1] // 2 - off_size, self.patch_size[0] // 2 - 0],
                                [self.patch_size[1] // 2 + off_size, self.patch_size[0] // 2 + off_size],
                                [self.patch_size[1] // 2 + off_size, self.patch_size[0] // 2 - off_size],
                                [25, 25]]

            self.next_coordinate = self.coordinates.pop(0)

            print("Trying to place at ", self.next_coordinate)
            if self.safe:
                self.pattern = make_safe_eight_barrel(self.next_coordinate[0], self.next_coordinate[1])
            else:
                self.pattern = make_eight_barrel(self.next_coordinate[0], self.next_coordinate[1])

    def iterate(
            self, iteration: int, board: np.ndarray, patch: np.ndarray, tokens: int
    ) -> Optional[Positions]:
        """
        This method will be called by the game engine on each iteration.

        Parameters:
        ----------
        iteration : int
            The current iteration number.
        board : numpy array
            The current state of the entire board.
        patch : numpy array
            The current state of the player's own patch on the board.
        tokens : list
            The list of tokens on the board.

        Returns:
        -------
        An object containing the x and y coordinates of the new cells.
        """

        if self.strategy == 1:

            if tokens >= 107-4 and self.done == 0:
                xy_array = string_to_numpy_array(max_go)

                y_max, x_max = np.where(xy_array > 0)

                return Positions(
                    x=x_max + self.start_offset_x, y=y_max + self.start_offset_y
                )

            if tokens < 50:
                # Must have bought
                self.done = 1

        elif self.strategy == 4:
            if tokens >= 105 - 4:
                xy_array = string_to_numpy_array(glider_gun_go)

                y_max, x_max = np.where(xy_array > 0)

                return Positions(
                    x=x_max + self.patch_size[1] // 2, y=y_max + self.patch_size[0] // 2
                )

        elif self.strategy == 5:

            if self.safe:
                cost = 56 + 4*4
            else:
                cost = 56

            if self.tried_to_build is not None:
                if self.tried_to_build < tokens:
                    self.wait = 0 # Try  to build again
                else:
                    self.tried_to_build = None

            if self.wait is None:
                if tokens >= cost and len(self.wait_times) > 0 and len(self.coordinates) > 0:
                    self.wait = self.wait_times.pop(0)
                    self.next_coordinate = self.coordinates.pop(0)

            else:
                self.wait -= 1
                #print("waiting")

            if self.wait is not None:
                time_since_last_birth = iteration - self.birth_times[-1]
                if self.wait <= 0 and time_since_last_birth % 156 == 0:
                    #print("Trying to place at ", self.next_coordinate)
                    self.wait = None
                    self.birth_times.append(iteration)
                    self.tried_to_build = tokens
                    return make_eight_barrel(self.next_coordinate[0], self.next_coordinate[1])

            #print(iteration, self.wait)

            """
            if tokens >= 56:
                xy_array = string_to_numpy_array(eight_barrel)
                y_max, x_max = np.where(xy_array > 0)

                x_max -= len(x_max)//2
                y_max -= len(y_max)//2

                return Positions(
                    x=x_max + self.patch_size[1] // 2, y=y_max + self.patch_size[0] // 3
                )
                
            """

        if self.strategy == 1:
            chaos_start_iteration = 700
        elif self.strategy == 5:
            chaos_start_iteration = 2700

        #print(iteration, chaos_start_iteration)

        if iteration > chaos_start_iteration:
            # Pick a random empty region of size 3x3 inside my patch
            if tokens > 7:
                empty_regions = helpers.find_empty_regions(patch, (10, 10))
                nregions = len(empty_regions)
                if nregions == 0:
                    return None
                # Make a glider
                ind = self.rng.integers(0, nregions)

                xy_array = string_to_numpy_array(acorn)

                y_max , x_max = np.where(xy_array > 0)

                x = x_max + empty_regions[ind, 1]
                y = y_max + empty_regions[ind, 0]
                return Positions(x=x, y=y)
